{
    "docs": [
        {
            "location": "/", 
            "text": "Utilities for the game of Go\n\n\n\n\n\n\nData structures and utilities to represent the \ngame of Go\n.\n\n\nThis library depends on \nImmutable.js\n and \nlodash\n.\n\n\nGetting Started\n\n\nInstall \ngodash\n via \nnpm\n.\n\n\nnpm install godash\n\n\n\nrequire\n and use it in your modules.\n\n\nvar go = require('godash');\nvar board = new godash.Board(19);\nvar tengen = new godash.Coordinate(9, 9); // 0-based\n\nboard.moves.has(tengen); // false\n\nvar standardOpening = placeStone(\n    board,\n    tengen,\n    godash.BLACK\n);\nstandardOpening.moves.has(tengen); // true\n\n\n\n\nRoadmap\n\n\nGodash doesn't currently do very much parameter checking.  It'd probably be\nnice to add that.\n\n\nThere also isn't much support for writing SGFs.  This, too, might be added in\nthe future.  Further, reading SGFs is a bit brittle at the moment since the\nfull SGF spec is not implemented.", 
            "title": "Home"
        }, 
        {
            "location": "/#utilities-for-the-game-of-go", 
            "text": "Data structures and utilities to represent the  game of Go .  This library depends on  Immutable.js  and  lodash .", 
            "title": "Utilities for the game of Go"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Install  godash  via  npm .  npm install godash  require  and use it in your modules.  var go = require('godash');\nvar board = new godash.Board(19);\nvar tengen = new godash.Coordinate(9, 9); // 0-based\n\nboard.moves.has(tengen); // false\n\nvar standardOpening = placeStone(\n    board,\n    tengen,\n    godash.BLACK\n);\nstandardOpening.moves.has(tengen); // true", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#roadmap", 
            "text": "Godash doesn't currently do very much parameter checking.  It'd probably be\nnice to add that.  There also isn't much support for writing SGFs.  This, too, might be added in\nthe future.  Further, reading SGFs is a bit brittle at the moment since the\nfull SGF spec is not implemented.", 
            "title": "Roadmap"
        }, 
        {
            "location": "/documentation/", 
            "text": "Board\n\n\nUtilities surrounding the board centering around an immutable \nBoard\n\nobject.\n\n\nCoordinate\n\n\n\n\nnew godash.Coordinate(x, y)\n\n\n\n\nClass representing a single location on a Go board.  Inherits from\n\nImmutable.Record\n.\n\n\nArguments\n\n\n\n\nx\n \n(number)\n: Location on one axis.\n\n\ny\n \n(number)\n: Location on the other axis.\n\n\n\n\nProperties\n\n\n\n\nx\n \n(number)\n: Location on one axis.\n\n\ny\n \n(number)\n: Location on the other axis.\n\n\n\n\nExample\n\n\nvar tengen = new Coordinate(9, 9);\n\ntengen.toString();\n// =\n Coordinate { \nx\n: 9, \ny\n: 9 }\n\ntengen.x;\n// =\n 9\n\n\n\n\nBoard\n\n\n\n\nnew godash.Board(dimensions = 19, ...moves)\n\n\n\n\nClass representing a Go board.  Inherits from \nImmutable.Record\n.\n\n\nArguments\n\n\n\n\ndimensions\n \n(number)\n: Size of the board, defaulted to 19x19.\n\n\n...moves\n \n(Coordinate, string)\n: Moves to be placed on the board.  They\n  should be provided in pairs of arguments - Coordinate and color.\n\n\n\n\nProperties\n\n\n\n\ndimensions\n \n(number)\n: Size of the board.\n\n\nmoves\n \n(Immutable.Map)\n: Moves on this board, keyed by\n  \nCoordinate\n with either \nBLACK\n or \nWHITE\n as\n  the value.\n\n\n\n\nExample\n\n\nvar board = new Board();\n\nboard.toString();\n// =\n Board { \ndimensions\n: 19, \nmoves\n: Map {} }\n\n\n\n\nvar smallBoard = new Board(5, new Coordinate(2, 2), BLACK);\n\nsmallBoard.toString();\n// =\n Board { \ndimensions\n: 5, \nmoves\n: Map { {\nx\n:2,\ny\n:2}: \nblack\n } }\n\n\n\n\naddMove\n\n\n\n\ngodash.addMove(board, coordinate, color)\n\n\n\n\nFunction to add a move onto a board while respecting the rules.  Since no\nsequence information is available, this function does not respect\n\nko\n.\n\n\nArguments\n\n\n\n\nboard\n \n(Board)\n: Board from which to add the move.\n\n\ncoordinate\n \n(Coordinate)\n: Location to add the move.\n\n\ncolor\n \n(string)\n: Color of the move - \nBLACK\n or\n  \nWHITE\n.\n\n\n\n\nReturns\n\n\n(Board)\n: New board with the move added.\n\n\nExample\n\n\nvar atari = new Board(3,\n    new Coordinate(1, 0), BLACK,\n    new Coordinate(0, 1), BLACK,\n    new Coordinate(1, 2), BLACK,\n    new Coordinate(1, 1), WHITE\n);\n\ntoAsciiBoard(atari);\n// =\n +O+\n//    OXO\n//    +++\n\nvar killed = addMove(\n    atari,\n    new Coordinate(2, 1),\n    BLACK\n);\n\ntoAsciiBoard(killed);\n// =\n +O+\n//    O+O\n//    +O+\n\n\n\n\nconstructBoard\n\n\n\n\ngodash.constructBoard(coordinates, board = null, startColor = godash.BLACK)\n\n\n\n\nConstructs a board for an array of coordinates.  This function iteratively\ncalls \naddMove\n while alternating colors.\n\n\nArguments\n\n\n\n\ncoordinates\n \n(Array)\n: Members of this array should be of type\n  \nCoordinate\n.\n\n\nboard\n \n(Board)\n: Optional starting board.  If omitted, a\n  default \nBoard\n is created - 19x19 and empty.\n\n\nstartColor\n \n(string)\n: Optional starting color, defaulted to \nBLACK\n.\n\n\n\n\nReturns\n\n\n(Board)\n: New board constructed from the coordinates.\n\n\nExample\n\n\nvar tigersMouth = new Board(3,\n    new Coordinate(1, 0), BLACK,\n    new Coordinate(0, 1), BLACK,\n    new Coordinate(1, 2), BLACK\n);\n\ntoAsciiBoard(tigersMouth);\n// =\n +O+\n//    O+O\n//    +++\n\nvar selfAtari = new Coordinate(1, 1);\nvar killingMove = new Coordinate(2, 1);\n\nvar ponnuki = constructBoard(\n    [selfAtari, killingMove],\n    tigersMouth,\n    WHITE\n);\n\ntoAsciiBoard(ponnuki);\n// =\n +O+\n//    O+O\n//    +O+\n\n\n\n\ngroup\n\n\n\n\ngodash.group(board, coordinate)\n\n\n\n\nFinds the set of coordinates which identifies the fully connected group for the\ngiven location.\n\n\nArguments\n\n\n\n\nboard\n \n(Board)\n: Board to inspect.\n\n\ncoordinate\n \n(Coordinate)\n: Location to inspect.\n\n\n\n\nReturns\n\n\n(Immutable.Set)\n: Set containing \nCoordinate\n\nmembers for the group.\n\n\nExample\n\n\nvar board = new Board(3,\n    new Coordinate(1, 0), WHITE,\n    new Coordinate(0, 2), WHITE,\n    new Coordinate(1, 2), BLACK,\n    new Coordinate(2, 2), BLACK,\n    new Coordinate(2, 1), BLACK\n);\n\ntoAsciiBoard(board);\n// =\n ++X\n//    X+O\n//    +OO\n\ngroup(board, new Coordinate(2, 1)).toString();\n// =\n Set {\n//      Coordinate { \nx\n: 2, \ny\n: 1 },\n//      Coordinate { \nx\n: 2, \ny\n: 2 },\n//      Coordinate { \nx\n: 1, \ny\n: 2 }\n//    }\n\n\n\n\nisLegalMove\n\n\n\n\ngodash.isLegalMove(board, coordinate, color)\n\n\n\n\nDetermine whether the coordinate-color combination provided is a legal move for\nthe board.  \nKo\n is not considered.\n\n\nArguments\n\n\n\n\nboard\n \n(Board)\n: Board to inspect.\n\n\ncoordinate\n \n(Coordinate)\n: Location to check.\n\n\ncolor\n \n(string)\n: Color to check - \nBLACK\n or \nWHITE\n.\n\n\n\n\nReturns\n\n\n(boolean)\n: Whether the move is legal.\n\n\nExample\n\n\nvar ponnuki = new Board(3,\n    new Coordinate(1, 0), BLACK,\n    new Coordinate(0, 1), BLACK,\n    new Coordinate(1, 2), BLACK,\n    new Coordinate(2, 1), BLACK\n);\n\ntoAsciiBoard(ponnuki);\n// =\n +O+\n//    O+O\n//    +O+\n\nisLegalMove(ponnuki, new Coordinate(1, 1), BLACK)\n// =\n true\n\nisLegalMove(ponnuki, new Coordinate(1, 1), WHITE)\n// =\n false\n\n\n\n\nliberties\n\n\n\n\ngodash.liberties(board, coordinate)\n\n\n\n\nFinds the set of all liberties for the given coordinate.  If the coordinate is\npart of a group, the set of liberties are the liberties for that group.\n\n\nArguments\n\n\n\n\nboard\n \n(Board)\n: Board to inspect.\n\n\ncoordinate\n \n(Coordinate)\n: Coordinate to inspect.\n\n\n\n\nReturns\n\n\n(Immutable.Set)\n: Set containing \nCoordinate\n\nmembers for the liberties of the passed coordinate.\n\n\nExample\n\n\nvar board = new Board(3, new Coordinate(1, 1), BLACK);\nvar collectedLiberties = liberties(board, new Coordinate(1, 1));\n\nImmutable.Set.of(\n    new Coordinate(1, 0),\n    new Coordinate(0, 1),\n    new Coordinate(1, 2),\n    new Coordinate(2, 1)\n).equals(collectedLiberties);\n// =\n true\n\n\n\n\nlibertyCount\n\n\n\n\ngodash.libertyCount(board, coordinate)\n\n\n\n\nCounts the liberties for the given coordinate.  If the coordinate is\npart of a group, liberties for the entire group is counted.\n\n\nArguments\n\n\n\n\nboard\n \n(Board)\n: Board to inspect.\n\n\ncoordinate\n \n(Coordinate)\n: Coordinate to inspect.\n\n\n\n\nReturns\n\n\n(number)\n: Count of liberties for the passed coordinate.\n\n\nExample\n\n\nvar board = new Board(3, new Coordinate(1, 1), BLACK);\n\nlibertyCount(board, new Coordinate(1, 1)) === 4;\n// =\n true\n\n\n\n\noppositeColor\n\n\n\n\ngodash.oppositeColor(color)\n\n\n\n\nToggles the passed color.\n\n\nArguments\n\n\n\n\ncolor\n \n(string)\n: \nBLACK\n or \nWHITE\n.\n\n\n\n\nReturns\n\n\n(string)\n: Color opposite of the one provided.\n\n\nExample\n\n\noppositeColor(BLACK) === WHITE\n// =\n true\n\noppositeColor(WHITE) === BLACK\n// =\n true\n\n\n\n\nplaceStone\n\n\n\n\ngodash.placeStone(board, coordinate, color, force = false)\n\n\n\n\nPlaces a stone on the board, ignoring the rules of Go.\n\n\nArguments\n\n\n\n\nboard\n \n(Board)\n: Board to add stone.\n\n\ncoordinate\n \n(Coordinate)\n: Location to add stone.\n\n\ncolor\n \n(string)\n: Stone color - \nBLACK\n or \nWHITE\n.\n\n\nforce\n \n(boolean)\n: Optionally allow placement over existing stones.\n\n\n\n\nReturns\n\n\n(Board)\n: New board with the stone placed.\n\n\nExample\n\n\nvar ponnuki = new Board(3,\n    new Coordinate(1, 0), BLACK,\n    new Coordinate(0, 1), BLACK,\n    new Coordinate(1, 2), BLACK,\n    new Coordinate(2, 1), BLACK\n);\n\ntoAsciiBoard(ponnuki);\n// =\n +O+\n//    O+O\n//    +O+\n\ntoAsciiBoard(\n    placeStone(ponnuki, new Coordinate(1, 1), WHITE)\n);\n// =\n +O+\n//    OXO\n//    +O+\n\n\n\n\nplaceStones\n\n\n\n\ngodash.placeStones(board, coordinates, color, force = false)\n\n\n\n\nPlaces a set of stones onto the board, ignoring the rules of Go.\n\n\nArguments\n\n\n\n\nboard\n \n(Board)\n: Board to add stone.\n\n\ncoordinate\n \n(Array)\n: Stones to place.\n\n\ncolor\n \n(string)\n: Stone color - \nBLACK\n or \nWHITE\n.\n\n\nforce\n \n(boolean)\n: Optionally allow placement over existing stones.\n\n\n\n\nReturns\n\n\n(Board)\n: New board with the stones placed.\n\n\nExample\n\n\nvar board = new Board(3, new Coordinate(1, 1), WHITE);\n\ntoAsciiBoard(board);\n// =\n +++\n//    +X+\n//    +++\n\ntoAsciiBoard(\n    placeStones(board, [\n        new Coordinate(1, 0),\n        new Coordinate(0, 1),\n        new Coordinate(1, 2),\n        new Coordinate(2, 1)\n    ], BLACK)\n);\n// =\n +O+\n//    OXO\n//    +O+\n\n\n\n\nremoveStone\n\n\n\n\ngodash.removeStone(board, coordinate)\n\n\n\n\nMake a given coordinate empty on the board.\n\n\nArguments\n\n\n\n\nboard\n \n(Board)\n: Board from which to remove the stone.\n\n\ncoordinate\n \n(Coordinate)\n: Location of the stone.\n\n\n\n\nReturns\n\n\n(Board)\n: New board with the stone removed.\n\n\nExample\n\n\nvar board = new Board(3, new Coordinate(1, 1), WHITE);\n\ntoAsciiBoard(board);\n// =\n +++\n//    +X+\n//    +++\n\ntoAsciiBoard(\n    removeStone(board, new Coordinate(1, 1))\n);\n// =\n +++\n//    +++\n//    +++\n\n\n\n\nremoveStones\n\n\n\n\ngodash.removeStones(board, coordinates)\n\n\n\n\nMakes several coordinates empty on the board.\n\n\nArguments\n\n\n\n\nboard\n \n(Board)\n: Board from which to remove the stones.\n\n\ncoordinate\n \n(Array)\n: Location of the stones.\n\n\n\n\nReturns\n\n\n(Board)\n: New board with the stones removed.\n\n\nExample\n\n\nvar board = new Board(3,\n    new Coordinate(1, 0), WHITE,\n    new Coordinate(1, 1), WHITE,\n    new Coordinate(1, 2), BLACK\n);\n\ntoAsciiBoard(board);\n// =\n +++\n//    XXO\n//    +++\n\ntoAsciiBoard(\n    removeStones(board, [\n        new Coordinate(1, 1),\n        new Coordinate(1, 2)\n    ])\n);\n// =\n +++\n//    X++\n//    +++\n\n\n\n\ntoAsciiBoard\n\n\n\n\ngodash.toAsciiBoard(board)\n\n\n\n\nConstructs an ASCII representation of the board.\n\n\nArguments\n\n\n\n\nboard\n \n(Board)\n: Board from which to add the move.\n\n\n\n\nReturns\n\n\n(string)\n: ASCII representation of the board.\n\n\nExample\n\n\nvar board = new Board(3,\n    new Coordinate(1, 0), BLACK,\n    new Coordinate(0, 1), BLACK,\n    new Coordinate(1, 2), BLACK,\n    new Coordinate(1, 1), WHITE\n);\n\ntoAsciiBoard(board);\n// =\n +O+\n//    OXO\n//    +++\n\n\n\n\nBLACK\n\n\n\n\ngodash.BLACK = 'black'\n\n\n\n\nConstant representing the stone color black.\n\n\nWHITE\n\n\n\n\ngodash.WHITE = 'white'\n\n\n\n\nConstant representing the stone color white.\n\n\nEMPTY\n\n\n\n\ngodash.EMPTY = null\n\n\n\n\nConstant representing an empty space.\n\n\nSGF\n\n\nUtilities to support \nSGF\n ingestion.\n\n\nsgfPointToCoordinate\n\n\n\n\ngodash.sgfPointToCoordinate(sgfPoint)\n\n\n\n\nConverts an \nSGF Point\n to a \nCoordinate\n.\n\n\nArguments\n\n\n\n\nsgfPoint\n \n(string)\n: 2-character string representing an \nSGF\n  Point\n.\n\n\n\n\nReturns\n\n\n(Coordinate)\n: Coordinate for the passed string.\n\n\nExample\n\n\nsgfPointToCoordinate('hi').toString();\n// =\n Coordinate { \nx\n: 7, \ny\n: 8 }\n\n\n\n\nsgfToJS\n\n\n\n\ngodash.sgfToJS(sgf)\n\n\n\n\nConverts a raw \nSGF\n string into a plain Javascript array.  Note that\nunlike \nBoard\n, the results of this function is a mutable object.\n\n\nArguments\n\n\n\n\nsgf\n \n(string)\n: Raw \nSGF\n string to be parsed.\n\n\n\n\nReturns\n\n\n(Array)\n: Plain Javascript array that breaks down SGF variations and\nturns moves into objects.\n\n\nExample\n\n\nvar rawSgf = `(\n    ;FF[4]GM[1]SZ[19];B[aa];W[bb]\n        (;B[cc];W[dd];B[ad];W[bd])\n        (;B[hh];W[hg]C[what a move!])\n        (;B[gg];W[gh];B[hh]\n            (;W[hg];B[kk])\n            (;W[kl])\n        )\n)`;\n\nsgfToJS(rawSgf);\n// =\n [\n//        {FF: '4', GM: '1', SZ: '19'}, {B: 'aa'}, {W: 'bb'},\n//        [\n//            [{B: 'cc'}, {W: 'dd'}, {B: 'ad'}, {W: 'bd'}],\n//            [{B: 'hh'}, {W: 'hg', C: 'what a move!'}],\n//            [\n//                {B: 'gg'}, {W: 'gh'}, {B: 'hh'},\n//                [\n//                    [{W: 'hg'}, {B: 'kk'}],\n//                    [{W: 'kl'}]\n//                ]\n//            ]\n//        ]\n//    ];", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#board", 
            "text": "Utilities surrounding the board centering around an immutable  Board \nobject.", 
            "title": "Board"
        }, 
        {
            "location": "/documentation/#coordinate", 
            "text": "new godash.Coordinate(x, y)  Class representing a single location on a Go board.  Inherits from Immutable.Record .", 
            "title": "Coordinate"
        }, 
        {
            "location": "/documentation/#arguments", 
            "text": "x   (number) : Location on one axis.  y   (number) : Location on the other axis.", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#properties", 
            "text": "x   (number) : Location on one axis.  y   (number) : Location on the other axis.", 
            "title": "Properties"
        }, 
        {
            "location": "/documentation/#example", 
            "text": "var tengen = new Coordinate(9, 9);\n\ntengen.toString();\n// =  Coordinate {  x : 9,  y : 9 }\n\ntengen.x;\n// =  9", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#board_1", 
            "text": "new godash.Board(dimensions = 19, ...moves)  Class representing a Go board.  Inherits from  Immutable.Record .", 
            "title": "Board"
        }, 
        {
            "location": "/documentation/#arguments_1", 
            "text": "dimensions   (number) : Size of the board, defaulted to 19x19.  ...moves   (Coordinate, string) : Moves to be placed on the board.  They\n  should be provided in pairs of arguments - Coordinate and color.", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#properties_1", 
            "text": "dimensions   (number) : Size of the board.  moves   (Immutable.Map) : Moves on this board, keyed by\n   Coordinate  with either  BLACK  or  WHITE  as\n  the value.", 
            "title": "Properties"
        }, 
        {
            "location": "/documentation/#example_1", 
            "text": "var board = new Board();\n\nboard.toString();\n// =  Board {  dimensions : 19,  moves : Map {} }  var smallBoard = new Board(5, new Coordinate(2, 2), BLACK);\n\nsmallBoard.toString();\n// =  Board {  dimensions : 5,  moves : Map { { x :2, y :2}:  black  } }", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#addmove", 
            "text": "godash.addMove(board, coordinate, color)  Function to add a move onto a board while respecting the rules.  Since no\nsequence information is available, this function does not respect ko .", 
            "title": "addMove"
        }, 
        {
            "location": "/documentation/#arguments_2", 
            "text": "board   (Board) : Board from which to add the move.  coordinate   (Coordinate) : Location to add the move.  color   (string) : Color of the move -  BLACK  or\n   WHITE .", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns", 
            "text": "(Board) : New board with the move added.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_2", 
            "text": "var atari = new Board(3,\n    new Coordinate(1, 0), BLACK,\n    new Coordinate(0, 1), BLACK,\n    new Coordinate(1, 2), BLACK,\n    new Coordinate(1, 1), WHITE\n);\n\ntoAsciiBoard(atari);\n// =  +O+\n//    OXO\n//    +++\n\nvar killed = addMove(\n    atari,\n    new Coordinate(2, 1),\n    BLACK\n);\n\ntoAsciiBoard(killed);\n// =  +O+\n//    O+O\n//    +O+", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#constructboard", 
            "text": "godash.constructBoard(coordinates, board = null, startColor = godash.BLACK)  Constructs a board for an array of coordinates.  This function iteratively\ncalls  addMove  while alternating colors.", 
            "title": "constructBoard"
        }, 
        {
            "location": "/documentation/#arguments_3", 
            "text": "coordinates   (Array) : Members of this array should be of type\n   Coordinate .  board   (Board) : Optional starting board.  If omitted, a\n  default  Board  is created - 19x19 and empty.  startColor   (string) : Optional starting color, defaulted to  BLACK .", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_1", 
            "text": "(Board) : New board constructed from the coordinates.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_3", 
            "text": "var tigersMouth = new Board(3,\n    new Coordinate(1, 0), BLACK,\n    new Coordinate(0, 1), BLACK,\n    new Coordinate(1, 2), BLACK\n);\n\ntoAsciiBoard(tigersMouth);\n// =  +O+\n//    O+O\n//    +++\n\nvar selfAtari = new Coordinate(1, 1);\nvar killingMove = new Coordinate(2, 1);\n\nvar ponnuki = constructBoard(\n    [selfAtari, killingMove],\n    tigersMouth,\n    WHITE\n);\n\ntoAsciiBoard(ponnuki);\n// =  +O+\n//    O+O\n//    +O+", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#group", 
            "text": "godash.group(board, coordinate)  Finds the set of coordinates which identifies the fully connected group for the\ngiven location.", 
            "title": "group"
        }, 
        {
            "location": "/documentation/#arguments_4", 
            "text": "board   (Board) : Board to inspect.  coordinate   (Coordinate) : Location to inspect.", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_2", 
            "text": "(Immutable.Set) : Set containing  Coordinate \nmembers for the group.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_4", 
            "text": "var board = new Board(3,\n    new Coordinate(1, 0), WHITE,\n    new Coordinate(0, 2), WHITE,\n    new Coordinate(1, 2), BLACK,\n    new Coordinate(2, 2), BLACK,\n    new Coordinate(2, 1), BLACK\n);\n\ntoAsciiBoard(board);\n// =  ++X\n//    X+O\n//    +OO\n\ngroup(board, new Coordinate(2, 1)).toString();\n// =  Set {\n//      Coordinate {  x : 2,  y : 1 },\n//      Coordinate {  x : 2,  y : 2 },\n//      Coordinate {  x : 1,  y : 2 }\n//    }", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#islegalmove", 
            "text": "godash.isLegalMove(board, coordinate, color)  Determine whether the coordinate-color combination provided is a legal move for\nthe board.   Ko  is not considered.", 
            "title": "isLegalMove"
        }, 
        {
            "location": "/documentation/#arguments_5", 
            "text": "board   (Board) : Board to inspect.  coordinate   (Coordinate) : Location to check.  color   (string) : Color to check -  BLACK  or  WHITE .", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_3", 
            "text": "(boolean) : Whether the move is legal.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_5", 
            "text": "var ponnuki = new Board(3,\n    new Coordinate(1, 0), BLACK,\n    new Coordinate(0, 1), BLACK,\n    new Coordinate(1, 2), BLACK,\n    new Coordinate(2, 1), BLACK\n);\n\ntoAsciiBoard(ponnuki);\n// =  +O+\n//    O+O\n//    +O+\n\nisLegalMove(ponnuki, new Coordinate(1, 1), BLACK)\n// =  true\n\nisLegalMove(ponnuki, new Coordinate(1, 1), WHITE)\n// =  false", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#liberties", 
            "text": "godash.liberties(board, coordinate)  Finds the set of all liberties for the given coordinate.  If the coordinate is\npart of a group, the set of liberties are the liberties for that group.", 
            "title": "liberties"
        }, 
        {
            "location": "/documentation/#arguments_6", 
            "text": "board   (Board) : Board to inspect.  coordinate   (Coordinate) : Coordinate to inspect.", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_4", 
            "text": "(Immutable.Set) : Set containing  Coordinate \nmembers for the liberties of the passed coordinate.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_6", 
            "text": "var board = new Board(3, new Coordinate(1, 1), BLACK);\nvar collectedLiberties = liberties(board, new Coordinate(1, 1));\n\nImmutable.Set.of(\n    new Coordinate(1, 0),\n    new Coordinate(0, 1),\n    new Coordinate(1, 2),\n    new Coordinate(2, 1)\n).equals(collectedLiberties);\n// =  true", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#libertycount", 
            "text": "godash.libertyCount(board, coordinate)  Counts the liberties for the given coordinate.  If the coordinate is\npart of a group, liberties for the entire group is counted.", 
            "title": "libertyCount"
        }, 
        {
            "location": "/documentation/#arguments_7", 
            "text": "board   (Board) : Board to inspect.  coordinate   (Coordinate) : Coordinate to inspect.", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_5", 
            "text": "(number) : Count of liberties for the passed coordinate.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_7", 
            "text": "var board = new Board(3, new Coordinate(1, 1), BLACK);\n\nlibertyCount(board, new Coordinate(1, 1)) === 4;\n// =  true", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#oppositecolor", 
            "text": "godash.oppositeColor(color)  Toggles the passed color.", 
            "title": "oppositeColor"
        }, 
        {
            "location": "/documentation/#arguments_8", 
            "text": "color   (string) :  BLACK  or  WHITE .", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_6", 
            "text": "(string) : Color opposite of the one provided.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_8", 
            "text": "oppositeColor(BLACK) === WHITE\n// =  true\n\noppositeColor(WHITE) === BLACK\n// =  true", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#placestone", 
            "text": "godash.placeStone(board, coordinate, color, force = false)  Places a stone on the board, ignoring the rules of Go.", 
            "title": "placeStone"
        }, 
        {
            "location": "/documentation/#arguments_9", 
            "text": "board   (Board) : Board to add stone.  coordinate   (Coordinate) : Location to add stone.  color   (string) : Stone color -  BLACK  or  WHITE .  force   (boolean) : Optionally allow placement over existing stones.", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_7", 
            "text": "(Board) : New board with the stone placed.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_9", 
            "text": "var ponnuki = new Board(3,\n    new Coordinate(1, 0), BLACK,\n    new Coordinate(0, 1), BLACK,\n    new Coordinate(1, 2), BLACK,\n    new Coordinate(2, 1), BLACK\n);\n\ntoAsciiBoard(ponnuki);\n// =  +O+\n//    O+O\n//    +O+\n\ntoAsciiBoard(\n    placeStone(ponnuki, new Coordinate(1, 1), WHITE)\n);\n// =  +O+\n//    OXO\n//    +O+", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#placestones", 
            "text": "godash.placeStones(board, coordinates, color, force = false)  Places a set of stones onto the board, ignoring the rules of Go.", 
            "title": "placeStones"
        }, 
        {
            "location": "/documentation/#arguments_10", 
            "text": "board   (Board) : Board to add stone.  coordinate   (Array) : Stones to place.  color   (string) : Stone color -  BLACK  or  WHITE .  force   (boolean) : Optionally allow placement over existing stones.", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_8", 
            "text": "(Board) : New board with the stones placed.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_10", 
            "text": "var board = new Board(3, new Coordinate(1, 1), WHITE);\n\ntoAsciiBoard(board);\n// =  +++\n//    +X+\n//    +++\n\ntoAsciiBoard(\n    placeStones(board, [\n        new Coordinate(1, 0),\n        new Coordinate(0, 1),\n        new Coordinate(1, 2),\n        new Coordinate(2, 1)\n    ], BLACK)\n);\n// =  +O+\n//    OXO\n//    +O+", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#removestone", 
            "text": "godash.removeStone(board, coordinate)  Make a given coordinate empty on the board.", 
            "title": "removeStone"
        }, 
        {
            "location": "/documentation/#arguments_11", 
            "text": "board   (Board) : Board from which to remove the stone.  coordinate   (Coordinate) : Location of the stone.", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_9", 
            "text": "(Board) : New board with the stone removed.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_11", 
            "text": "var board = new Board(3, new Coordinate(1, 1), WHITE);\n\ntoAsciiBoard(board);\n// =  +++\n//    +X+\n//    +++\n\ntoAsciiBoard(\n    removeStone(board, new Coordinate(1, 1))\n);\n// =  +++\n//    +++\n//    +++", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#removestones", 
            "text": "godash.removeStones(board, coordinates)  Makes several coordinates empty on the board.", 
            "title": "removeStones"
        }, 
        {
            "location": "/documentation/#arguments_12", 
            "text": "board   (Board) : Board from which to remove the stones.  coordinate   (Array) : Location of the stones.", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_10", 
            "text": "(Board) : New board with the stones removed.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_12", 
            "text": "var board = new Board(3,\n    new Coordinate(1, 0), WHITE,\n    new Coordinate(1, 1), WHITE,\n    new Coordinate(1, 2), BLACK\n);\n\ntoAsciiBoard(board);\n// =  +++\n//    XXO\n//    +++\n\ntoAsciiBoard(\n    removeStones(board, [\n        new Coordinate(1, 1),\n        new Coordinate(1, 2)\n    ])\n);\n// =  +++\n//    X++\n//    +++", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#toasciiboard", 
            "text": "godash.toAsciiBoard(board)  Constructs an ASCII representation of the board.", 
            "title": "toAsciiBoard"
        }, 
        {
            "location": "/documentation/#arguments_13", 
            "text": "board   (Board) : Board from which to add the move.", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_11", 
            "text": "(string) : ASCII representation of the board.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_13", 
            "text": "var board = new Board(3,\n    new Coordinate(1, 0), BLACK,\n    new Coordinate(0, 1), BLACK,\n    new Coordinate(1, 2), BLACK,\n    new Coordinate(1, 1), WHITE\n);\n\ntoAsciiBoard(board);\n// =  +O+\n//    OXO\n//    +++", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#black", 
            "text": "godash.BLACK = 'black'  Constant representing the stone color black.", 
            "title": "BLACK"
        }, 
        {
            "location": "/documentation/#white", 
            "text": "godash.WHITE = 'white'  Constant representing the stone color white.", 
            "title": "WHITE"
        }, 
        {
            "location": "/documentation/#empty", 
            "text": "godash.EMPTY = null  Constant representing an empty space.", 
            "title": "EMPTY"
        }, 
        {
            "location": "/documentation/#sgf", 
            "text": "Utilities to support  SGF  ingestion.", 
            "title": "SGF"
        }, 
        {
            "location": "/documentation/#sgfpointtocoordinate", 
            "text": "godash.sgfPointToCoordinate(sgfPoint)  Converts an  SGF Point  to a  Coordinate .", 
            "title": "sgfPointToCoordinate"
        }, 
        {
            "location": "/documentation/#arguments_14", 
            "text": "sgfPoint   (string) : 2-character string representing an  SGF\n  Point .", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_12", 
            "text": "(Coordinate) : Coordinate for the passed string.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_14", 
            "text": "sgfPointToCoordinate('hi').toString();\n// =  Coordinate {  x : 7,  y : 8 }", 
            "title": "Example"
        }, 
        {
            "location": "/documentation/#sgftojs", 
            "text": "godash.sgfToJS(sgf)  Converts a raw  SGF  string into a plain Javascript array.  Note that\nunlike  Board , the results of this function is a mutable object.", 
            "title": "sgfToJS"
        }, 
        {
            "location": "/documentation/#arguments_15", 
            "text": "sgf   (string) : Raw  SGF  string to be parsed.", 
            "title": "Arguments"
        }, 
        {
            "location": "/documentation/#returns_13", 
            "text": "(Array) : Plain Javascript array that breaks down SGF variations and\nturns moves into objects.", 
            "title": "Returns"
        }, 
        {
            "location": "/documentation/#example_15", 
            "text": "var rawSgf = `(\n    ;FF[4]GM[1]SZ[19];B[aa];W[bb]\n        (;B[cc];W[dd];B[ad];W[bd])\n        (;B[hh];W[hg]C[what a move!])\n        (;B[gg];W[gh];B[hh]\n            (;W[hg];B[kk])\n            (;W[kl])\n        )\n)`;\n\nsgfToJS(rawSgf);\n// =  [\n//        {FF: '4', GM: '1', SZ: '19'}, {B: 'aa'}, {W: 'bb'},\n//        [\n//            [{B: 'cc'}, {W: 'dd'}, {B: 'ad'}, {W: 'bd'}],\n//            [{B: 'hh'}, {W: 'hg', C: 'what a move!'}],\n//            [\n//                {B: 'gg'}, {W: 'gh'}, {B: 'hh'},\n//                [\n//                    [{W: 'hg'}, {B: 'kk'}],\n//                    [{W: 'kl'}]\n//                ]\n//            ]\n//        ]\n//    ];", 
            "title": "Example"
        }
    ]
}